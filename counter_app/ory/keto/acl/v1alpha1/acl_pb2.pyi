"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class RelationTuple(google.protobuf.message.Message):
    """RelationTuple defines a relation between an Object and a Subject."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    OBJECT_FIELD_NUMBER: builtins.int
    RELATION_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace this relation tuple lives in."""

    object: typing.Text
    """The object related by this tuple.
    It is an object in the namespace of the tuple.
    """

    relation: typing.Text
    """The relation between an Object and a Subject."""

    @property
    def subject(self) -> global___Subject:
        """The subject related by this tuple.
        A Subject either represents a concrete subject id or
        a `SubjectSet` that expands to more Subjects.
        """
        pass
    def __init__(
        self,
        *,
        namespace: typing.Text = ...,
        object: typing.Text = ...,
        relation: typing.Text = ...,
        subject: typing.Optional[global___Subject] = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["subject", b"subject"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "namespace",
            b"namespace",
            "object",
            b"object",
            "relation",
            b"relation",
            "subject",
            b"subject",
        ],
    ) -> None: ...

global___RelationTuple = RelationTuple

class Subject(google.protobuf.message.Message):
    """Subject is either a concrete subject id or
    a `SubjectSet` expanding to more Subjects.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    SET_FIELD_NUMBER: builtins.int
    id: typing.Text
    """A concrete id of the subject."""

    @property
    def set(self) -> global___SubjectSet:
        """A subject set that expands to more Subjects.
        More information are available under [concepts](../concepts/subjects.mdx).
        """
        pass
    def __init__(
        self,
        *,
        id: typing.Text = ...,
        set: typing.Optional[global___SubjectSet] = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "id", b"id", "ref", b"ref", "set", b"set"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "id", b"id", "ref", b"ref", "set", b"set"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ref", b"ref"]
    ) -> typing.Optional[typing_extensions.Literal["id", "set"]]: ...

global___Subject = Subject

class SubjectSet(google.protobuf.message.Message):
    """SubjectSet refers to all subjects who have
    the same `relation` on an `object`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    OBJECT_FIELD_NUMBER: builtins.int
    RELATION_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace of the object and relation
    referenced in this subject set.
    """

    object: typing.Text
    """The object related by this subject set."""

    relation: typing.Text
    """The relation between the object and the subjects."""

    def __init__(
        self,
        *,
        namespace: typing.Text = ...,
        object: typing.Text = ...,
        relation: typing.Text = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "namespace", b"namespace", "object", b"object", "relation", b"relation"
        ],
    ) -> None: ...

global___SubjectSet = SubjectSet
