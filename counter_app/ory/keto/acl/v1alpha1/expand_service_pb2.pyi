"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import ory.keto.acl.v1alpha1.acl_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _NodeType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _NodeTypeEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_NodeType.ValueType],
    builtins.type,
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NODE_TYPE_UNSPECIFIED: _NodeType.ValueType  # 0
    NODE_TYPE_UNION: _NodeType.ValueType  # 1
    """This node expands to a union of all children."""

    NODE_TYPE_EXCLUSION: _NodeType.ValueType  # 2
    """Not implemented yet."""

    NODE_TYPE_INTERSECTION: _NodeType.ValueType  # 3
    """Not implemented yet."""

    NODE_TYPE_LEAF: _NodeType.ValueType  # 4
    """This node is a leaf and contains no children.
    Its subject is a `SubjectID` unless `max_depth` was reached.
    """

class NodeType(_NodeType, metaclass=_NodeTypeEnumTypeWrapper):
    pass

NODE_TYPE_UNSPECIFIED: NodeType.ValueType  # 0
NODE_TYPE_UNION: NodeType.ValueType  # 1
"""This node expands to a union of all children."""

NODE_TYPE_EXCLUSION: NodeType.ValueType  # 2
"""Not implemented yet."""

NODE_TYPE_INTERSECTION: NodeType.ValueType  # 3
"""Not implemented yet."""

NODE_TYPE_LEAF: NodeType.ValueType  # 4
"""This node is a leaf and contains no children.
Its subject is a `SubjectID` unless `max_depth` was reached.
"""

global___NodeType = NodeType

class ExpandRequest(google.protobuf.message.Message):
    """The request for an ExpandService.Expand RPC.
    Expands the given subject set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SUBJECT_FIELD_NUMBER: builtins.int
    MAX_DEPTH_FIELD_NUMBER: builtins.int
    SNAPTOKEN_FIELD_NUMBER: builtins.int
    @property
    def subject(self) -> ory.keto.acl.v1alpha1.acl_pb2.Subject:
        """The subject to expand."""
        pass
    max_depth: builtins.int
    """The maximum depth of tree to build.

    If the value is less than 1 or greater than the global
    max-depth then the global max-depth will be used instead.

    It is important to set this parameter to a meaningful
    value. Ponder how deep you really want to display this.
    """

    snaptoken: typing.Text
    """This field is not implemented yet and has no effect.
    <!--
    Optional. Like reads, a expand is always evaluated at a
    consistent snapshot no earlier than the given snaptoken.

    Leave this field blank if you want to expand
    based on eventually consistent ACLs, benefiting from very
    low latency, but possibly slightly stale results.

    If the specified token is too old and no longer known,
    the server falls back as if no snaptoken had been specified.

    If not specified the server tries to build the tree
    on the best snapshot version where it is very likely that
    ACLs had already been replicated to all availability zones.
    -->
    """

    def __init__(
        self,
        *,
        subject: typing.Optional[ory.keto.acl.v1alpha1.acl_pb2.Subject] = ...,
        max_depth: builtins.int = ...,
        snaptoken: typing.Text = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["subject", b"subject"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "max_depth", b"max_depth", "snaptoken", b"snaptoken", "subject", b"subject"
        ],
    ) -> None: ...

global___ExpandRequest = ExpandRequest

class ExpandResponse(google.protobuf.message.Message):
    """The response for a ExpandService.Expand RPC."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TREE_FIELD_NUMBER: builtins.int
    @property
    def tree(self) -> global___SubjectTree:
        """The tree the requested subject set expands to.
        The requested subject set is the subject of the root.

        This field can be nil in some circumstances.
        """
        pass
    def __init__(
        self,
        *,
        tree: typing.Optional[global___SubjectTree] = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["tree", b"tree"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["tree", b"tree"]
    ) -> None: ...

global___ExpandResponse = ExpandResponse

class SubjectTree(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NODE_TYPE_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    node_type: global___NodeType.ValueType
    """The type of the node."""

    @property
    def subject(self) -> ory.keto.acl.v1alpha1.acl_pb2.Subject:
        """The subject this node represents."""
        pass
    @property
    def children(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___SubjectTree
    ]:
        """The children of this node.

        This is never set if `node_type` == `NODE_TYPE_LEAF`.
        """
        pass
    def __init__(
        self,
        *,
        node_type: global___NodeType.ValueType = ...,
        subject: typing.Optional[ory.keto.acl.v1alpha1.acl_pb2.Subject] = ...,
        children: typing.Optional[typing.Iterable[global___SubjectTree]] = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["subject", b"subject"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "children", b"children", "node_type", b"node_type", "subject", b"subject"
        ],
    ) -> None: ...

global___SubjectTree = SubjectTree
