"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import ory.keto.acl.v1alpha1.acl_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ListRelationTuplesRequest(google.protobuf.message.Message):
    """Request for ReadService.ListRelationTuples RPC.
    See `ListRelationTuplesRequest_Query` for how to filter the query.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Query(google.protobuf.message.Message):
        """The query for listing relation tuples.
        Clients can specify any optional field to
        partially filter for specific relation tuples.

        Example use cases (namespace is always required):
         - object only: display a list of all permissions referring to a specific object
         - relation only: get all groups that have members; get all directories that have content
         - object & relation: display all subjects that have a specific permission relation
         - subject & relation: display all groups a subject belongs to; display all objects a subject has access to
         - object & relation & subject: check whether the relation tuple already exists
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        NAMESPACE_FIELD_NUMBER: builtins.int
        OBJECT_FIELD_NUMBER: builtins.int
        RELATION_FIELD_NUMBER: builtins.int
        SUBJECT_FIELD_NUMBER: builtins.int
        namespace: typing.Text
        """Required. The namespace to query."""

        object: typing.Text
        """Optional. The object to query for."""

        relation: typing.Text
        """Optional. The relation to query for."""

        @property
        def subject(self) -> ory.keto.acl.v1alpha1.acl_pb2.Subject:
            """Optional. The subject to query for."""
            pass
        def __init__(
            self,
            *,
            namespace: typing.Text = ...,
            object: typing.Text = ...,
            relation: typing.Text = ...,
            subject: typing.Optional[ory.keto.acl.v1alpha1.acl_pb2.Subject] = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["subject", b"subject"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "namespace",
                b"namespace",
                "object",
                b"object",
                "relation",
                b"relation",
                "subject",
                b"subject",
            ],
        ) -> None: ...

    QUERY_FIELD_NUMBER: builtins.int
    EXPAND_MASK_FIELD_NUMBER: builtins.int
    SNAPTOKEN_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def query(self) -> global___ListRelationTuplesRequest.Query:
        """All query constraints are concatenated
        with a logical AND operator.

        The RelationTuple list from ListRelationTuplesResponse
        is ordered from the newest RelationTuple to the oldest.
        """
        pass
    @property
    def expand_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """This field is not implemented yet and has no effect.
        <!--
        Optional. The list of fields to be expanded
        in the RelationTuple list returned in `ListRelationTuplesResponse`.
        Leaving this field unspecified means all fields are expanded.

        Available fields:
        "object", "relation", "subject",
        "namespace", "subject.id", "subject.namespace",
        "subject.object", "subject.relation"
        -->
        """
        pass
    snaptoken: typing.Text
    """This field is not implemented yet and has no effect.
    <!--
    Optional. The snapshot token for this read.
    -->
    """

    page_size: builtins.int
    """Optional. The maximum number of
    RelationTuples to return in the response.

    Default: 100
    """

    page_token: typing.Text
    """Optional. An opaque pagination token returned from
    a previous call to `ListRelationTuples` that
    indicates where the page should start at.

    An empty token denotes the first page. All successive
    pages require the token from the previous page.
    """

    def __init__(
        self,
        *,
        query: typing.Optional[global___ListRelationTuplesRequest.Query] = ...,
        expand_mask: typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        snaptoken: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "expand_mask", b"expand_mask", "query", b"query"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "expand_mask",
            b"expand_mask",
            "page_size",
            b"page_size",
            "page_token",
            b"page_token",
            "query",
            b"query",
            "snaptoken",
            b"snaptoken",
        ],
    ) -> None: ...

global___ListRelationTuplesRequest = ListRelationTuplesRequest

class ListRelationTuplesResponse(google.protobuf.message.Message):
    """The response of a ReadService.ListRelationTuples RPC."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RELATION_TUPLES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def relation_tuples(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        ory.keto.acl.v1alpha1.acl_pb2.RelationTuple
    ]:
        """The relation tuples matching the list request."""
        pass
    next_page_token: typing.Text
    """The token required to get the next page.
    If this is the last page, the token will be the empty string.
    """

    def __init__(
        self,
        *,
        relation_tuples: typing.Optional[
            typing.Iterable[ory.keto.acl.v1alpha1.acl_pb2.RelationTuple]
        ] = ...,
        next_page_token: typing.Text = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "next_page_token", b"next_page_token", "relation_tuples", b"relation_tuples"
        ],
    ) -> None: ...

global___ListRelationTuplesResponse = ListRelationTuplesResponse
